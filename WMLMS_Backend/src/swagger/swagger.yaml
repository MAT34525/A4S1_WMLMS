paths:

  # Login =========================================================================================

  /u/admin-login:
    post:
      description : Logs an administrator directly to the database using Sequelize
      tags :
        - login
      requestBody :
        description : The request body requires the username and password of the administrator that tries to login.
        required : true
        content :
          application/json :
            schema :
              $ref: '#/components/requestBodies/Login'
      responses :
        200 :
          description: Successful login
          content:
            application/json:
              schema:
                $ref: '#/components/responses/Info'
              example:
                message: "Admin successfully connected !"
        503:
          description : No connection to the database
          content :
            application/json :
              schema :
                $ref: '#/components/responses/Error'
              example :
                  message : No connection to the database !
        400 :
          description : An error occurred
          content:
            application/json:
              schema:
                $ref: '#/components/responses/Error'
              examples:
                Invalid Body :
                  value :
                    message: All fields are mandatory.
                Invalid Credentials :
                  value :
                    message: Admin credentials are invalid !
                Other :
                  value :
                    message: An error occurred, please try again.

  # ADMIN #########################################################################################
  # Admin User CRUD ===============================================================================

  /s/admin/users/ :
    get :
      description : Get a list of all users
      tags :
        - admin
      responses :
        200 :
          description : All the tuples in the Users table
          content :
            application/json :
              schema :
                $ref: '#/components/responses/UsersList'
        400 :
          description : Error when calling the function
          content :
            application/json :
              schema :
                $ref: '#/components/responses/Error'
              examples :
                SQLI:
                  description : SQLI detected when calling the function
                  value:
                    message : Bad Request !
                Table Not Found :
                  value :
                    message: Table not found !
        503:
          description: No connection to the database
          content:
            application/json:
              schema:
                $ref: '#/components/responses/Error'
              example:
                message: No connection to the database !

  /s/admin/users/{id} :
    get:
      description: Get an user by its UUID
      parameters :
        - in: path
          name : id
          required: true
          type: string
          example : e2150b36-21af-4647-87ff-6410a5862ec7
      tags:
        - admin
      responses :
        200 :
          description : Get the user associated to the UUID
          content :
            application/json :
              schema :
                $ref: '#/components/schemas/Users'
        404 :
          description : User not found
          content :
            application/json:
              schema :
                $ref: '#/components/responses/Error'
              example :
                message : Not found !
        503:
          description: No connection to the database
          content:
            application/json:
              schema:
                $ref: '#/components/responses/Error'
              example:
                message: No connection to the database !
    delete :
      description:
      tags:
        - admin
      parameters:
        - in: path
          name: id
          required: true
          type: string
          example: e2150b36-21af-4647-87ff-6410a5862ec7
      responses :
        200 :
          description: User deleted
          content:
            application/json:
              schema:
                $ref: '#/components/responses/Info'
              example:
                message: User successfully deleted !
        404:
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/responses/Error'
              example:
                message: Not found !
        503:
          description: No connection to the database
          content:
            application/json:
              schema:
                $ref: '#/components/responses/Error'
              example:
                message: No connection to the database !
    put :
      description:
      tags:
        - admin
      parameters:
        - in: path
          name: id
          required: true
          type: string
          example: e2150b36-21af-4647-87ff-6410a5862ec7
      requestBody :
        description : The user object to be updated
        required : true
        content :
          application/json :
            schema :
              $ref: '#/components/schemas/Users'
      responses :
        200 :
          description : User updated
          content:
            application/json:
              schema:
                $ref: '#/components/responses/Info'
              example :
                message : "User successfully updated !"
        400:
          description : Invalid request
          content :
            application/json :
              schema :
                $ref: '#/components/responses/Error'
              examples :
                Missing body :
                  value :
                    message: Missing body !
                Missing ID :
                  value :
                      message: Missing id !
        503:
          description: No connection to the database
          content:
            application/json:
              schema:
                $ref: '#/components/responses/Error'
              example:
                message: No connection to the database !

  /s/admin/users/lock/{id} :
    put :
      description:
      tags:
        - admin
      parameters:
        - in: path
          name: id
          required: true
          type: string
          example: e2150b36-21af-4647-87ff-6410a5862ec7
      requestBody:
        description: The user where the lock must be toggled
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Users'
      responses:
        200:
          description: User updated
          content:
            application/json:
              schema:
                $ref: '#/components/responses/Info'
              example:
                message: "User successfully updated !"
        400:
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/responses/Error'
              examples:
                Missing body:
                  value:
                    message: Missing body !
                Missing ID:
                  value:
                    message: Missing id !
        404:
          description : User not found
          content :
            application/json:
              schema:
                $ref: '#/components/responses/Error'
              example:
                  message: User not found !
        503:
          description: No connection to the database
          content:
            application/json:
              schema:
                $ref: '#/components/responses/Error'
              example:
                message: No connection to the database !

  # Admin Artist ==================================================================================

  /s/admin/artists/{id} :
    get :
      description: Get an artist by its ID
      parameters :
        - in: path
          name : id
          required: true
          type: string
          example : 0E0eEzoo3nfBf5efmw6S1Q
      tags:
        - admin
      responses :
        200 :
          description : Get the artist associated to the ID
          content :
            application/json :
              schema :
                $ref: '#/components/schemas/Artists'
        404 :
          description : User not found
          content :
            application/json:
              schema :
                $ref: '#/components/responses/Error'
              example :
                message : Not found !
        503:
          description: No connection to the database
          content:
            application/json:
              schema:
                $ref: '#/components/responses/Error'
              example:
                message: No connection to the database !

  /s/admin/artists:
    get:
      description : Get a list of all artists
      tags :
        - admin
      responses :
        200 :
          description : All the tuples in the Artists table
          content :
            application/json :
              schema :
                $ref: '#/components/responses/ArtistsList'
        400 :
          description : Error when calling the function
          content :
            application/json :
              schema :
                $ref: '#/components/responses/Error'
              examples :
                SQLI:
                  description : SQLI detected when calling the function
                  value:
                    message : Bad Request !
                Table Not Found :
                  value :
                    message: Table not found !
        503:
          description: No connection to the database
          content:
            application/json:
              schema:
                $ref: '#/components/responses/Error'
              example:
                message: No connection to the database !

  /s/admin/count/artists :
    get :
      description : Get the number of artists in the Artists table
      tags :
        - admin
      responses :
        200 :
          description : The number of tuples in the artist tables
          content :
            application/json:
              schema:
                type : object
                properties :
                  result :
                    type : number
                    example : 326

        400 :
          description: An unexpected error occurred
          content:
            application/json:
              schema:
                $ref: '#/components/responses/Error'
              example:
                message: An error occurred !

        503:
          description: No connection to the database
          content:
            application/json:
              schema:
                $ref: '#/components/responses/Error'
              example:
                message: No connection to the database !

  /s/admin/artists/delayed:
    post:
      description : Get a list of 'size' artists starting from the 'page'*'size' offset
      requestBody:
        description: The page number and page size of the requested artists
        required: true
        content:
          application/json:
            schema:
              type: object
              required: true
              properties:
                page:
                  type: number
                  required: true
                  example: 3
                size:
                  type: number
                  required: true
                  example: 6
      tags :
        - admin
      responses :
        200 :
          description : The selected tuples in the Artists table
          content :
            application/json :
              schema :
                $ref: '#/components/responses/ArtistsList'
        400 :
          description : Error when calling the function
          content :
            application/json :
              schema :
                $ref: '#/components/responses/Error'
              examples :
                Missing Body :
                  description : Missing fields in the body
                  value:
                    message : Missing body fields !
                Invalid Sizes :
                  value :
                    message: Invalid sizes !
                Other :
                  value:
                      message: An error occurred !
        503:
          description: No connection to the database
          content:
            application/json:
              schema:
                $ref: '#/components/responses/Error'
              example:
                message: No connection to the database !

  /s/admin/artists/verification/{id}:
    put :
      description:
      tags:
        - admin
      parameters:
        - in: path
          name: id
          required: true
          type: string
          example: 0DzfuBZVzDryD5ZqKla8EW
      requestBody:
        description: The artist where the verification must be toggled
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Artists'
      responses:
        200:
          description: Artist updated
          content:
            application/json:
              schema:
                $ref: '#/components/responses/Info'
              example:
                message: "Artist successfully updated !"
        400:
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/responses/Error'
              examples:
                Missing body:
                  value:
                    message: Missing body !
                Missing ID:
                  value:
                    message: Missing id !
        404 :
          description: Artist not found
          content:
            application/json:
              schema:
                $ref: '#/components/responses/Error'
              example:
                message: Artists not found !
        503:
          description: No connection to the database
          content:
            application/json:
              schema:
                $ref: '#/components/responses/Error'
              example:
                message: No connection to the database !

  # Admin Tables ==================================================================================

  /s/admin/albums:
    get:
      description : Get a list of all albums
      tags :
        - admin
      responses :
        200 :
          description : All the tuples in the Albums table
          content :
            application/json :
              schema :
                $ref: '#/components/responses/AlbumsList'
        400 :
          description : Error when calling the function
          content :
            application/json :
              schema :
                $ref: '#/components/responses/Error'
              examples :
                SQLI:
                  description : SQLI detected when calling the function
                  value:
                    message : Bad Request !
                Table Not Found :
                  value :
                    message: Table not found !
        503:
          description: No connection to the database
          content:
            application/json:
              schema:
                $ref: '#/components/responses/Error'
              example:
                message: No connection to the database !

  /s/admin/playlists:
    get:
      description : Get a list of all playlists
      tags :
        - admin
      responses :
        200 :
          description : All the tuples in the Playlists table
          content :
            application/json :
              schema :
                $ref: '#/components/responses/PlaylistsList'
        400 :
          description : Error when calling the function
          content :
            application/json :
              schema :
                $ref: '#/components/responses/Error'
              examples :
                SQLI:
                  description : SQLI detected when calling the function
                  value:
                    message : Bad Request !
                Table Not Found :
                  value :
                    message: Table not found !
        503:
          description: No connection to the database
          content:
            application/json:
              schema:
                $ref: '#/components/responses/Error'
              example:
                message: No connection to the database !

  /s/admin/tracks:
    get:
      description : Get a list of all tracks
      tags :
        - admin
      responses :
        200 :
          description : All the tuples in the Tracks table
          content :
            application/json :
              schema :
                $ref: '#/components/responses/TracksList'
        400 :
          description : Error when calling the function
          content :
            application/json :
              schema :
                $ref: '#/components/responses/Error'
              examples :
                SQLI:
                  description : SQLI detected when calling the function
                  value:
                    message : Bad Request !
                Table Not Found :
                  value :
                    message: Table not found !
        503:
          description: No connection to the database
          content:
            application/json:
              schema:
                $ref: '#/components/responses/Error'
              example:
                message: No connection to the database !

  # Admin Query ===================================================================================

  /s/admin/query :
    post :
      description : Run a custom query in the database and retrieve results <br/> **The query is dialect sensitive !**
      requestBody :
        content :
          application/json :
            schema :
              type : object
              required : true
              properties :
                query :
                  type : string
                  required : true
                  example : Your custom query
            examples :
              Oracle :
                value :
                  query : "SELECT * FROM USERS"
              Postgres :
                value :
                    query : SELECT * FROM public."USERS"
      tags :
        - admin
      responses :
        200 :
          description : The response of the query as an array of two elements. The first part is the list of object, the second part is a list of columns
          content :
            application/json :
              schema :
                type : array
                items:
                  type : object
                minItems : 2
                maxItems : 2
        400 :
          description : Invalid request
          content :
              application/json :
                schema :
                  $ref : '#/components/responses/Error'
                examples :
                    Missing Body :
                      value :
                        message : Bad request !
                    Bad Request :
                      value :
                          message : Sequelize error depending on the dialect

        503:
          description: No connection to the database
          content:
            application/json:
              schema:
                $ref: '#/components/responses/Error'
              example:
                message: No connection to the database !

  # Admin Statistics ==============================================================================

  /s/admin/query-count :
    post :
      description :
      requestBody :
        content :
          application/json :
            schema :
              type : object
              properties :
                table :
                  type : string
                  example : "ARTISTS"
                  enum: [USERS, ARTISTS, TRACKS, PLAYLISTS, PLAYLIST_TRACKS, ALBUMS]
              required :
              - table
      tags :
        - admin
      responses :
        200 :
          description : The number of rows in the selected table
          content :
            application/text :
              type : number
              example : 302
        400 :
          description : Invalid request
          content :
            application/json :
              schema:
                $ref: '#/components/responses/Error'
              examples:
                Missing Body :
                  value :
                    message: Bad request !
                Other :
                  value :
                      message : Sequelize custom error message
        404 :
          Description : Table not found
          application/json:
            schema:
              $ref: '#/components/responses/Error'
            example:
              message: Table not found !
        503 :
          description: No connection to the database
          content:
            application/json:
              schema:
                $ref: '#/components/responses/Error'
              example:
                message: No connection to the database !

  /s/admin/statistics/artists:
    get:
      description: Get the top 10 artists in terms of followers from the database
      tags:
        - admin
      responses :
        200:
          description : A list of the top 10 artist name with their followers count
          content :
            application/json :
              schema :
                type : array
                items :
                  type : object
                  properties :
                    NAME :
                      type : string
                      example : Ed Sheeran
                    FOLLOWERS :
                      type : number
                      example : 3678202
                maxItems : 10
                minItems : 0
        400:
          description : An error occurred
          content :
            application/json :
              schema :
                $ref : '#/components/responses/Error'
              example :
                message : An error occurred !
        503:
          description: No connection to the database
          content:
            application/json:
              schema:
                $ref: '#/components/responses/Error'
              example:
                message: No connection to the database !

  /s/admin/statistics/explicit:
    get:
      description: Get the repartition of explicit tracks from the database
      tags:
        - admin
      responses :
        200:
          description : The number of explicit tracks per category
          content :
            application/json :
              schema :
                type : array
                items :
                  type : object
                  properties :
                    EXPLICIT :
                      type : number
                      example : 0
                    COUNT :
                      type : string
                      example : 3678202
                maxItems : 2
                minItems : 0
        400:
          description : An error occurred
          content :
            application/json :
              schema :
                $ref : '#/components/responses/Error'
              example :
                message : An error occurred !
        503:
          description: No connection to the database
          content:
            application/json:
              schema:
                $ref: '#/components/responses/Error'
              example:
                message: No connection to the database !

  # USER ##########################################################################################

  # User Playlists ================================================================================
  /u/playlists/{id} :
    put :
      tags:
        - playlists
      parameters:
        - in: path
          name: id
          required: true
          type: string
          example: 3ad858ab-4c21-4edc-929b-a1eb1a1d32cc
      description : Update a playlist using its UUID and object
      requestBody :
        content :
          application/json :
            schema :
              $ref: '#/components/schemas/Playlists'
      responses :
        200:
          description: Playlist updated
          content:
            application/json:
              schema:
                $ref: '#/components/responses/Info'
              example:
                message: Playlist successfully updated.
        400:
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/responses/Error'
              example:
                message: All fields are mandatory.
        404:
          description: Playlist not found
          content:
            application/json:
              schema:
                $ref: '#/components/responses/Error'
              example:
                message: Playlist not found.
        500:
          description: An error occurred
          content:
            application/json:
              schema:
                $ref: '#/components/responses/Error'
              example:
                message: Error with playlist update.
        503:
          description: No connection to the database
          content:
            application/json:
              schema:
                $ref: '#/components/responses/Error'
              example:
                message: No connection to the database !
    delete :
      tags:
        - playlists
      description: Delete a playlist using its UUID
      parameters:
        - in: path
          name: id
          required: true
          type: string
          example: 3ad858ab-4c21-4edc-929b-a1eb1a1d32cc
      responses:
        200:
          description: Playlist deleted
          content:
            application/json:
              schema:
                $ref: '#/components/responses/Info'
              example:
                message: Playlist successfully deleted.
        404:
          description: Playlist not found
          content:
            application/json:
              schema:
                $ref: '#/components/responses/Error'
              example:
                message: Playlist not found.
        500:
          description: An error occurred
          content:
            application/json:
              schema:
                $ref: '#/components/responses/Error'
              example:
                message: Error with playlist deletion.
        503:
          description: No connection to the database
          content:
            application/json:
              schema:
                $ref: '#/components/responses/Error'
              example:
                message: No connection to the database !

  /u/playlists :
    get :
      tags:
        - playlists
      description: Get a list of all playlists in the database
      responses:
        200:
          description : A list of all playlists
          content :
            application/json :
              schema :
                $ref: '#/components/responses/PlaylistsList'
        500:
          description : An error occurred
          content:
            application/json :
              schema :
                $ref: '#/components/responses/Error'
              example:
                  message: Error when retrieving playlists
        503:
          description: No connection to the database
          content:
            application/json:
              schema:
                $ref: '#/components/responses/Error'
              example:
                message: No connection to the database !
    post:
      tags:
        - playlists
      description: Create a new empty playlist
      requestBody :
        content :
          application/json :
            schema :
              type : object
              required: true
              properties :
                name :
                  type : string
                  example : My new playlist
                description :
                  type : string
                  example : A temporary playlist
                isPublic :
                  type : string
                  example : N
      responses:
        201:
          description : Playlist created
          content :
            application/json :
              schema:
                $ref: '#/components/responses/Info'
              example:
                message: Playlist successfully created
        400:
          description : Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/responses/Error'
              example:
                message: All fields are mandatory.
        500:
          description: An error occurred
          content:
            application/json:
              schema:
                $ref: '#/components/responses/Error'
              example:
                message: Error with playlist creation.
        503:
          description: No connection to the database
          content:
            application/json:
              schema:
                $ref: '#/components/responses/Error'
              example:
                message: No connection to the database !

  /u/playlists-tracks/{id} :
    get :
      tags:
        - playlists
      parameters:
        - in: path
          name: id
          required: true
          type: string
          example: 3ad858ab-4c21-4edc-929b-a1eb1a1d32cc
      description : Get all tracks in a playlist using the playlist UUID
      responses :
        200:
          description: List of tracks contained in the playlist
          content:
            application/json:
              schema:
                $ref: '#/components/responses/TracksList'
        404:
          description: Not tracks in the playlist
          content:
            application/json:
              schema:
                $ref: '#/components/responses/Error'
              example:
                message: No tracks found for this playlist.
        500:
          description: An error occurred
          content:
            application/json:
              schema:
                $ref: '#/components/responses/Error'
              example:
                message: Error fetching tracks for playlist.
        503:
          description: No connection to the database
          content:
            application/json:
              schema:
                $ref: '#/components/responses/Error'
              example:
                message: No connection to the database !

  # User Search ===================================================================================

  /u/queries/tracks :
    post :
      tags :
        - search
      description : Research tracks in the database using a searching string
      requestBody :
        content :
          application/json:
            schema :
              $ref: '#/components/requestBodies/Query'
            example :
              query : track name

      responses :
        200:
          description: List of tracks containing the researched string
          content:
            application/json:
              schema:
                $ref: '#/components/responses/TracksList'
        400:
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/responses/Error'
              example:
                message: Query parameter is required
        500:
          description : Server error when dealing with the request
          content:
            application/json:
              schema:
                $ref: '#/components/responses/Error'
              example:
                message: Internal server error
        503:
          description: No connection to the database
          content:
            application/json:
              schema:
                $ref: '#/components/responses/Error'
              example:
                message: No connection to the database !

  /u/queries/artists:
    post :
      tags:
        - search
      description: Research artists in the database using a searching string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/requestBodies/Query'
            example:
              query: artist name

      responses:
        200:
          description: List of artists containing the researched string
          content:
            application/json:
              schema:
                $ref: '#/components/responses/ArtistsList'
        400:
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/responses/Error'
              example:
                message: Query parameter is required
        500:
          description: Server error when dealing with the request
          content:
            application/json:
              schema:
                $ref: '#/components/responses/Error'
              example:
                message: Internal server error
        503:
          description: No connection to the database
          content:
            application/json:
              schema:
                $ref: '#/components/responses/Error'
              example:
                message: No connection to the database !